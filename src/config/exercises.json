[
    {
        "code": "// How would you refactor this code to ES6 classes?\n\nfunction Animal(name, age, gender, height, weight) {\n\tthis.name = name;\n\tthis.age = age;\n\tthis.gender = gender;\n\tthis.height = height;\n\tthis.weight = weight;\n}\n\nAnimal.prototype = {\n\twalk: function () {\n\t\tconsole.log(\"Walking...\");\n\t},\n};\n\nfunction Dog() {\n\tAnimal.apply(this, arguments);\n}\n\nDog.prototype = Object.create(Animal);\nDog.prototype.constructor = Dog;\nDog.prototype = {\n\tbark: function () {\n\t\tconsole.log(\"Woof...\");\n\t},\n};\n\nfunction Cat() {\n\tAnimal.apply(this, arguments);\n}\n\nCat.prototype = Object.create(Animal);\nCat.prototype.constructor = Cat;\nCat.prototype = {\n\tmeow: function () {\n\t\tconsole.log(\"Miau...\");\n\t},\n};\n\nconst dog = new Dog(\"Firulais\", 5, \"Male\", 60, 35);\nconst cat = new Cat(\"Michifus\", 2, \"Female\", 25, 5);\n\nconsole.log(dog);\nconsole.log(cat);\n"
    },
    {
        "code": "/* \n    - Can you spot the error and explain why?\n    - How would you execute the method with the correct data without removing the static keyword?\n*/\n\nclass Car {\n\tconstructor(brand, model) {\n\t\tthis.brand = brand;\n\t\tthis.model = model;\n\t}\n\n\tstartEngine() {\n\t\tconsole.log(\"Bruuum...\");\n\t}\n\n\tstatic showOff() {\n\t\tconsole.log(`This car is a ${this.brand} ${this.model} and it's awesome!`);\n\t}\n}\n\nconst car = new Car(\"Ford\", \"Focus\");\n\ncar.startEngine();\ncar.showOff();"
    },
    {
        "code": "/* \n    - Can you explaing what the \"Object.setPrototypeOf\" method is doing?\n    - How would you do this differently using classes?\n*/\n\nconst CommonMethods = {\n\tsayHi() {\n\t\tconsole.log(`Hi I'm ${this.name} from the ${this.discipline} discipline...`)\n\t},\n\tlearn() {\n\t\tconsole.log(`${this.name} is learning ${this.skills.join(', ')}`);\n\t},\n};\n\nclass Intern {\n\tconstructor(name, discipline, ...skills) {\n\t\tthis.name = name;\n\t\tthis.discipline = discipline;\n\t\tthis.skills = skills;\n\t}\n}\n\nObject.setPrototypeOf(Intern.prototype, CommonMethods);\n\nconst developmentIntern = new Intern(\"Fulanito\", \"Development\", \"Javascript\", \"HTML\", \"CSS\");\ndevelopmentIntern.sayHi();\ndevelopmentIntern.learn();\n\nconst testingIntern = new Intern(\"Menganito\", \"Testing\", \"Javascript\", \"Manual testing\", \"Automation\");\ntestingIntern.sayHi();\ntestingIntern.learn();\n"
    }
]
